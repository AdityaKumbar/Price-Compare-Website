{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Fetch products from a specific scraper\nexport const fetchProducts = async (platform, query) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/scrapers/${platform}`, {\n      params: {\n        q: query\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching products from ${platform}:`, error);\n    throw error;\n  }\n};\nexport const searchZomato = async location => {\n  try {\n    const formattedLocation = location.replace(/\\s+/g, '-').toLowerCase(); // Format location for Zomato URL\n    const url = `https://www.zomato.com/${formattedLocation}/restaurants?place_name=${encodeURIComponent(location)}&context=delivery&category=1`;\n    console.log('Constructed Zomato URL:', url); // Debugging log\n\n    const response = await fetch(`/api/zomato?url=${encodeURIComponent(url)}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch Zomato data');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error in searchZomato:', error);\n    return [];\n  }\n};\nexport const searchSwiggy = async location => {\n  try {\n    const response = await fetch(`/api/swiggy?location=${encodeURIComponent(location)}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch Swiggy data');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error in searchSwiggy:', error);\n    return [];\n  }\n};\n\n// Search across all platforms\nexport const searchAllPlatforms = async query => {\n  try {\n    console.log('Searching platforms for:', query);\n    const response = await axios.get(`${API_BASE_URL}/scrapers/search-all`, {\n      params: {\n        q: query\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error searching across platforms:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","fetchProducts","platform","query","response","get","params","q","data","error","console","searchZomato","location","formattedLocation","replace","toLowerCase","url","encodeURIComponent","log","fetch","ok","Error","json","searchSwiggy","searchAllPlatforms"],"sources":["C:/Users/ADITYA/Desktop/price compare/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\n// Fetch products from a specific scraper\r\nexport const fetchProducts = async (platform, query) => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}/scrapers/${platform}`, {\r\n      params: { q: query },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error fetching products from ${platform}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const searchZomato = async (location) => {\r\n  try {\r\n    const formattedLocation = location.replace(/\\s+/g, '-').toLowerCase(); // Format location for Zomato URL\r\n    const url = `https://www.zomato.com/${formattedLocation}/restaurants?place_name=${encodeURIComponent(location)}&context=delivery&category=1`;\r\n    console.log('Constructed Zomato URL:', url); // Debugging log\r\n\r\n    const response = await fetch(`/api/zomato?url=${encodeURIComponent(url)}`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch Zomato data');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error in searchZomato:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const searchSwiggy = async (location) => {\r\n  try {\r\n    const response = await fetch(`/api/swiggy?location=${encodeURIComponent(location)}`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch Swiggy data');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error in searchSwiggy:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Search across all platforms\r\nexport const searchAllPlatforms = async (query) => {\r\n  try {\r\n    console.log('Searching platforms for:', query);\r\n    const response = await axios.get(`${API_BASE_URL}/scrapers/search-all`, {\r\n      params: { q: query },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error searching across platforms:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,KAAK,KAAK;EACtD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,GAAGL,YAAY,aAAaE,QAAQ,EAAE,EAAE;MACvEI,MAAM,EAAE;QAAEC,CAAC,EAAEJ;MAAM;IACrB,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgCP,QAAQ,GAAG,EAAEO,KAAK,CAAC;IACjE,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C,IAAI;IACF,MAAMC,iBAAiB,GAAGD,QAAQ,CAACE,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC;IACvE,MAAMC,GAAG,GAAG,0BAA0BH,iBAAiB,2BAA2BI,kBAAkB,CAACL,QAAQ,CAAC,8BAA8B;IAC5IF,OAAO,CAACQ,GAAG,CAAC,yBAAyB,EAAEF,GAAG,CAAC,CAAC,CAAC;;IAE7C,MAAMZ,QAAQ,GAAG,MAAMe,KAAK,CAAC,mBAAmBF,kBAAkB,CAACD,GAAG,CAAC,EAAE,CAAC;IAC1E,IAAI,CAACZ,QAAQ,CAACgB,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,OAAO,MAAMjB,QAAQ,CAACkB,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOb,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAMc,YAAY,GAAG,MAAOX,QAAQ,IAAK;EAC9C,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMe,KAAK,CAAC,wBAAwBF,kBAAkB,CAACL,QAAQ,CAAC,EAAE,CAAC;IACpF,IAAI,CAACR,QAAQ,CAACgB,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,OAAO,MAAMjB,QAAQ,CAACkB,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOb,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAMe,kBAAkB,GAAG,MAAOrB,KAAK,IAAK;EACjD,IAAI;IACFO,OAAO,CAACQ,GAAG,CAAC,0BAA0B,EAAEf,KAAK,CAAC;IAC9C,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,GAAGL,YAAY,sBAAsB,EAAE;MACtEM,MAAM,EAAE;QAAEC,CAAC,EAAEJ;MAAM;IACrB,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}